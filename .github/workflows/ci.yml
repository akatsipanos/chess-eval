name: 'Continuous Integration'

on:
  push:
    branches:
      - master
  pull_request:
    branches: [ 'master' ]
  workflow_call:
    inputs:
      python_versions:
        description: 'Additional Python versions to test. Do not specify 3.11, 3.12, or 3.13.'
        required: false
        type: string
        default: ''
      source_dirs:
        description: 'Source directory(s) to use when running MyPy, isort and Pylint'
        required: false
        type: string
        default: ./chess_eval ./tests
      skip_mypy:
        description: 'If set, MyPy will be skipped.'
        required: false
        type: boolean
        default: false
      skip_pylint:
        description: If set, Pylint will be skipped. This should only be used if an alternative linter has been configured for your project.
        required: false
        type: boolean
        default: false

env:
  SOURCE_DIRS: ${{ inputs.source_dirs || './chess_eval' }}
  DEFAULT_PYTHON_VERSIONS: '["3.11","3.12","3.13"]'

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          VERSIONS=("3.11" "3.12" "3.13")

          if [ -n "${{ inputs.python_versions }}" ]; then
            IFS=', ' read -ra USER_VERSIONS <<< "${{ inputs.python_versions }}"
            for version in "${USER_VERSIONS[@]}"; do
              version=$(echo "$version" | xargs)
              if [[ $version =~ ^3\.[0-9]+$ ]]; then
                VERSIONS+=("$version")
              else
                echo "Warning: Invalid Python version format: $version - skipping"
              fi
            done
          fi

          UNIQUE_VERSIONS=($(printf "%s\n" "${VERSIONS[@]}" | sort -u -V))
          JSON_ARRAY=$(printf '"%s",' "${UNIQUE_VERSIONS[@]}" | sed 's/,$//')
          echo "matrix=[${JSON_ARRAY}]" >> $GITHUB_OUTPUT

  continuous_integration:
    needs: set-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.set-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          version: "0.7.11"

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run Mypy
        if: ${{ inputs.skip_mypy != true && (success() || failure()) }}
        run: |
          uv run mypy ${{ env.SOURCE_DIRS }} --explicit-package-bases

      - name: Run isort
        if: success() || failure()
        run: |
          uv run isort ${{ env.SOURCE_DIRS }} --check-only
      - name: Run unit tests
        if: success() || failure()
        run: |
         uv run pytest "$(pwd)/tests/unit" || [ $? -eq 5 ]
      - name: Run integration tests
        if: success() || failure()
        run: |
          if [ -d "$(pwd)/tests/integration" ]; then uv run pytest "$(pwd)/tests/integration" || [ $? -eq 5 ]; fi
      - name: Run Ruff
        if: ${{ inputs.skip_pylint != true && (success() || failure()) }}
        run: |
          uv run ruff check ${{ env.SOURCE_DIRS }}
